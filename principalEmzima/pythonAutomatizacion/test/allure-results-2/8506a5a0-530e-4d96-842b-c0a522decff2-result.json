{"name": "demoblaze", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Product added\nMessage: unexpected alert open: {Alert text : Product added}\n  (Session info: chrome=129.0.6668.100)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7D48DB095+29557]\n\t(No symbol) [0x00007FF7D484FA50]\n\t(No symbol) [0x00007FF7D470B56A]\n\t(No symbol) [0x00007FF7D47A90D9]\n\t(No symbol) [0x00007FF7D4786F33]\n\t(No symbol) [0x00007FF7D475116F]\n\t(No symbol) [0x00007FF7D47522D1]\n\tGetHandleVerifier [0x00007FF7D4C0C96D+3378253]\n\tGetHandleVerifier [0x00007FF7D4C58497+3688311]\n\tGetHandleVerifier [0x00007FF7D4C4D1CB+3642539]\n\tGetHandleVerifier [0x00007FF7D499A6B6+813462]\n\t(No symbol) [0x00007FF7D485AB5F]\n\t(No symbol) [0x00007FF7D4856B74]\n\t(No symbol) [0x00007FF7D4856D10]\n\t(No symbol) [0x00007FF7D4845C1F]\n\tBaseThreadInitThunk [0x00007FFC6DF6257D+29]\n\tRtlUserThreadStart [0x00007FFC7026AF08+40]", "trace": "chrome_browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"563747c4593f2c9a2889e9ca680905f8\")>\n\n    @pytest.mark.smoke\n    @pytest.mark.chrome\n    @pytest.mark.case_4\n    @allure.title('demoblaze')\n    def test_meli(chrome_browser):\n        chrome_browser.get(url_dmb)\n        link_list =  chrome_browser.find_elements(By.ID, 'itemc') #.send_keys(fill_text,Keys.ENTER)\n        link_list[1].click()\n        time.sleep(10)\n        #chrome_browser.implicitly_wait(10)\n        chrome_browser.find_element(\n            By.XPATH,'/html/body/div[5]/div/div[2]/form/ul/li[2]/button').click() #.send_keys(fill_text,Keys.ENTER)\n        time.sleep(6)\n        #chrome_browser.implicitly_wait(6)\n        chrome_browser.find_element(\n            By.XPATH, '/html/body/div[5]/div/div[2]/div/div[5]/div/div/h4/a'\n        ).click()\n        time.sleep(8)\n        #chrome_browser.implicitly_wait(10)\n        chrome_browser.find_element(\n            By.XPATH, '//*[@id=\"tbodyid\"]/div[2]/div/a'\n        ).click()\n        time.sleep(10)\n        #chrome_browser.implicitly_wait(10)\n        alert = Alert(chrome_browser)\n>       allure_attach(chrome_browser.get_screenshot_as_png(),'demo.png')\n\ntest_practII.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:839: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n..\\..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:850: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n..\\..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B8C0CC8BC0>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"Product added\"},\"error\":\"unexpected alert open\",\"message\":\"unexpec...07FF7D4845C1F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC6DF6257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFC7026AF08+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Product added\nE           Message: unexpected alert open: {Alert text : Product added}\nE             (Session info: chrome=129.0.6668.100)\nE           Stacktrace:\nE           \tGetHandleVerifier [0x00007FF7D48DB095+29557]\nE           \t(No symbol) [0x00007FF7D484FA50]\nE           \t(No symbol) [0x00007FF7D470B56A]\nE           \t(No symbol) [0x00007FF7D47A90D9]\nE           \t(No symbol) [0x00007FF7D4786F33]\nE           \t(No symbol) [0x00007FF7D475116F]\nE           \t(No symbol) [0x00007FF7D47522D1]\nE           \tGetHandleVerifier [0x00007FF7D4C0C96D+3378253]\nE           \tGetHandleVerifier [0x00007FF7D4C58497+3688311]\nE           \tGetHandleVerifier [0x00007FF7D4C4D1CB+3642539]\nE           \tGetHandleVerifier [0x00007FF7D499A6B6+813462]\nE           \t(No symbol) [0x00007FF7D485AB5F]\nE           \t(No symbol) [0x00007FF7D4856B74]\nE           \t(No symbol) [0x00007FF7D4856D10]\nE           \t(No symbol) [0x00007FF7D4845C1F]\nE           \tBaseThreadInitThunk [0x00007FFC6DF6257D+29]\nE           \tRtlUserThreadStart [0x00007FFC7026AF08+40]\n\n..\\..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:228: UnexpectedAlertPresentException"}, "start": 1729028725506, "stop": 1729028761522, "uuid": "88c83495-a73e-4264-a30e-554f12598e87", "historyId": "ad0bdc5b4d8ad444899da23e3d081361", "testCaseId": "ad0bdc5b4d8ad444899da23e3d081361", "fullName": "test_practII#test_meli", "labels": [{"name": "tag", "value": "case_4"}, {"name": "tag", "value": "chrome"}, {"name": "tag", "value": "smoke"}, {"name": "suite", "value": "test_practII"}, {"name": "host", "value": "clases"}, {"name": "thread", "value": "9708-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_practII"}]}